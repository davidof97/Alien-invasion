import sys
from time import sleep
import pygame

from settings import Settings
from game_stats import GameStats
from scoreboard import Scoreboard
from button import Button
from ship import Ship
from bullet import Bullet
from alien import  Alien

class AlienInvasion:
    """A generel class designed to manage resources and game operations"""
    
    def __init__(self):
        """Initialization of game and creation of game resources"""
        pygame.init()
        self.settings = Settings()
        
        #Windowscreen mode
        self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_height))
        """
        #Fullscreen mode
        self.screen = pygame.display.set_mode((0,0), pygame.FULLSCREEN)
        self.settings.screen_width = self.screen.get_rect().width
        self.settings.screen_height = self.screen.get_rect().height
        """
        pygame.display.set_caption("Alien invasion")
        
        self.stats = GameStats(self)
        self.sb = Scoreboard(self)
        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()
        
        self._create_fleet()
        
        #Creating button Play game
        self.play_button = Button(self, "Play game")
        
        
    def run_game(self):
        """The beggining of main game loop"""
        while True:
            # Waiting for pressing a key of mouse button
            self._check_events()
            
            if self.stats.game_active:
                self.ship.update()
                self._update_bullets()
                self._update_aliens()
                
            self._update_screen()
                      
           
    def _check_events(self):
        """Reaction for events generated by keyboard and mouse"""
        for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        sys.exit()         
                    elif event.type == pygame.KEYDOWN:
                        self._check_keydown_events(event)    
                    elif event.type == pygame.KEYUP:
                        self._check_keyup_events(event)
                    elif event.type == pygame.MOUSEBUTTONDOWN:
                        mouse_pos = pygame.mouse.get_pos()
                        self._check_play_button(mouse_pos)
    
    
    def _check_play_button(self, mouse_pos):
        """Start game after clicking button Play game"""
        button_clicked = self.play_button.rect.collidepoint(mouse_pos)
        
        if button_clicked and not self.stats.game_active:
            self.settings.initialize_dynamic_settings()
            self.stats.reset_stats()
            self.stats.game_active = True
            self.sb.prep_score()
            self.sb.prep_level()
            self.sb.prep_ships()
 
            self.aliens.empty()
            self.bullets.empty()
            
            self._create_fleet()
            self.ship.center_ship()
            
            pygame.mouse.set_visible(False)      
                               

    def _check_keydown_events(self, event):
        """Reaction for key press"""
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = True
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = True
        elif event.key == pygame.K_q:
            sys.exit()
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()
  
            
    def _check_keyup_events(self, event):
        """Reaction for key press"""
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = False
            
            
    def _fire_bullet(self):
        """Create new bullet and adding it to bullet group"""
        if len(self.bullets) < self.settings.bullets_allowed:
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet)
   
   
    def _update_bullets(self):
        """Update bullets position and removing invisible bullets"""
        self.bullets.update()
               
        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                self.bullets.remove(bullet)
        
        self._check_bullet_alien_collisions()
    
    
    def _check_bullet_alien_collisions(self):
        """Reaction for collision between bullet and alien"""
        #Check if any bullet hit alien
        #If yes - remove bullet and alien
        collisions = pygame.sprite.groupcollide(self.bullets, self.aliens, True, True)
        
        if collisions:
            for aliens in collisions.values():
                self.stats.score += self.settings.alien_points * len(aliens)
            self.sb.prep_score()
            self.sb.check_high_score()
        
        if not self.aliens:
            #Remove bullets and create new fleet of aliens
            self.bullets.empty()
            self._create_fleet()
            self.settings.increase_speed()
            
            #Level incrementation
            self.stats.level += 1
            self.sb.prep_level()
            
    
    
    def _ship_hit(self):
        """Reaction for ship hit by alien"""
        
        if self.stats.ship_left > 0:
            #Decrease value stored in ship_left
            self.stats.ship_left -= 1
            self.sb.prep_ships()
        
            #Deleting the content of aliens and bullets lists
            self.aliens.empty()
            self.bullets.empty()
        
            #Creating new fleet of aliens and moving ship to the center
            self._create_fleet()
            self.ship.center_ship()
        
            #Pause
            sleep(0.5)
        
        else:
            self.stats.game_active = False
            pygame.mouse.set_visible(True)
    
    
    def _check_aliens_bottom(self):
        """Checking if any alien reach the bottom edge of screen"""
        screen_rect = self.screen.get_rect()
        
        for alien in self.aliens.sprites():
            if alien.rect.bottom >= screen_rect.bottom:
                #The same reaction as ship hitting by alien
                self._ship_hit()
                break
                
    
    def _update_aliens(self):
        """Checking if fleet reach the edge and update the position of all aliens"""
        self._check_fleet_edges()
        self.aliens.update()
        
        #Collision detection between bullet and alien
        if pygame.sprite.spritecollideany(self.ship, self.aliens):
            self._ship_hit()
        
        #Checking if any aliens reach bottom edge
        self._check_aliens_bottom()
    
    
    def _create_fleet(self):
        """Creating alien fleet"""
        #Creating the first alien and determine how many aliens can be placed on row
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        available_space_x = self.settings.screen_width - (2 * alien_width)
        number_aliens_x = available_space_x // (2 * alien_width)
        
        #Determine how much rows of aliens we can put into the screen
        ship_height = self.ship.rect.height
        available_space_y = (self.settings.screen_height - (3 * alien_height) - ship_height)
        number_rows = available_space_y // (2 * alien_height)
        
        #Create fleet of aliens
        for row_number in range(number_rows):
            for alien_number in range(number_aliens_x):
                self._create_alien(alien_number, row_number)
    
    
    def _create_alien(self, alien_number, row_number):
        """Creating an alien and placing it in a row"""
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        alien.x = alien_width + 2 * alien_width * alien_number
        alien.rect.x = alien.x
        alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
        self.aliens.add(alien)
    
    
    def _check_fleet_edges(self):
        """Proper reaction when alien reach the edge"""
        for alien in self.aliens.sprites():
            if alien.check_edges():
                self._change_fleet_direction()
                break
    
    
    def _change_fleet_direction(self):
        """Moving the entire fleet down and change the direction"""
        for alien in self.aliens.sprites():
            alien.rect.y += self.settings.fleet_drop_speed
        self.settings.fleet_direction *= -1
        
                 
    def _update_screen(self):
        """Update screen and switch to new screen"""
        #Refreshing screen on the every iteration of loop
        self.screen.fill(self.settings.bg_color)
        self.ship.blitime()
        
        for bullet in self.bullets.sprites():
            bullet.draw_bullet()
            
        self.aliens.draw(self.screen)
        
        self.sb.show_score()
        
        #Displaying button 'Play game' only when game is inactive
        if not self.stats.game_active:
            self.play_button.draw_button()
            
        #Display recently modified screen    
        pygame.display.flip()
    
    
if __name__ == '__main__':
    #Creating copy of the game and running it
    ai = AlienInvasion()
    ai.run_game()